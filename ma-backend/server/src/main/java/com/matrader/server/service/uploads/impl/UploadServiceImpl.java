package com.matrader.server.service.uploads.impl;


import com.matrader.server.service.uploads.UploadService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.time.Duration;
import java.util.Base64;
import java.util.UUID;

@Service
public class UploadServiceImpl implements UploadService {

    @Autowired
    private RedisTemplate<String, Object> redisTemplate;


    /**
     * Save a multipart file object into redis database
     * @param file : MultipartFile object, {file: byte[], }
     * @return The generated uuid for the uploaded image
     * @throws IOException
     */
    @Override
    public String saveImageTemporarily(MultipartFile file) throws IOException {
        String imageId = UUID.randomUUID().toString();
        byte[] fileBytes = file.getBytes();
        // Convert binary data to string representation with base64 encoding
        String encodedFile = Base64.getEncoder().encodeToString(fileBytes);
        redisTemplate.opsForValue().set(imageId, encodedFile, Duration.ofMinutes(10));
        return imageId;
    }

    /**
     * Get the image by its uuid
     * @param imageId uuid of the image, previously generated by saveImageTemporarily()
     * @return The deserialized byte stream of the image
     */
    @Override
    public byte[] getImageFromTempStorage(String imageId) {
        String encodedFile = (String) redisTemplate.opsForValue().get(imageId);
        if (encodedFile != null) {
            return Base64.getDecoder().decode(encodedFile);
        }
        return null;
    }

    @Override
    public void deleteImageFromTempStorage(String imageId) {
        redisTemplate.delete(imageId);
    }
}
